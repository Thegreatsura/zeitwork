// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const organisationFindByID = `-- name: OrganisationFindByID :one
select id, installation_id, github_username from organisations where id = $1
`

func (q *Queries) OrganisationFindByID(ctx context.Context, id int32) (Organisation, error) {
	row := q.db.QueryRow(ctx, organisationFindByID, id)
	var i Organisation
	err := row.Scan(&i.ID, &i.InstallationID, &i.GithubUsername)
	return i, err
}

const organisationFindByInstallationID = `-- name: OrganisationFindByInstallationID :one
select id, installation_id, github_username from organisations where installation_id = $1
`

func (q *Queries) OrganisationFindByInstallationID(ctx context.Context, installationID int64) (Organisation, error) {
	row := q.db.QueryRow(ctx, organisationFindByInstallationID, installationID)
	var i Organisation
	err := row.Scan(&i.ID, &i.InstallationID, &i.GithubUsername)
	return i, err
}

const organisationInsert = `-- name: OrganisationInsert :one
insert into organisations ( installation_id, github_username) values ($1, $2) returning id, installation_id, github_username
`

type OrganisationInsertParams struct {
	InstallationID int64
	GithubUsername string
}

func (q *Queries) OrganisationInsert(ctx context.Context, arg OrganisationInsertParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, organisationInsert, arg.InstallationID, arg.GithubUsername)
	var i Organisation
	err := row.Scan(&i.ID, &i.InstallationID, &i.GithubUsername)
	return i, err
}

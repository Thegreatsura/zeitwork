package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/zeitwork/zeitwork/internal/auth"
	"github.com/zeitwork/zeitwork/internal/graph/model"
	"github.com/zeitwork/zeitwork/internal/services/db"
)

// LoginWithGitHub is the resolver for the loginWithGitHub field.
func (r *mutationResolver) LoginWithGitHub(ctx context.Context, code string) (model.LoginWithGitHubPayload, error) {
	// exchange the code for github user
	ghUser, err := r.Services.Github.ExchangeCodeForUser(ctx, code)
	if err != nil {
		return model.LoginWithGitHubPayload{}, err
	}

	// ensure this user already exists in the database
	user, err := r.Services.DB.UserFindByGithubID(ctx, *ghUser.ID)
	if err != nil {
		// if the user was not found, generate default user+org
		if !errors.Is(err, sql.ErrNoRows) {
			return model.LoginWithGitHubPayload{}, err
		}

		user, err = r.CreateUserAndDefaultOrg(ctx, ghUser)
		if err != nil {
			return model.LoginWithGitHubPayload{}, err
		}
	}

	// sign jwt
	token, err := auth.Sign(user.ID)
	if err != nil {
		return model.LoginWithGitHubPayload{}, err
	}

	return model.LoginWithGitHubPayload{
		Token: token,
		User:  user,
	}, nil
}

// SetInstallationID is the resolver for the setInstallationID field.
func (r *mutationResolver) SetInstallationID(ctx context.Context, installationID string, organisationID string) (model.SetInstallationIDPayload, error) {
	panic(fmt.Errorf("not implemented: SetInstallationID - setInstallationID"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (model.CreateProjectPayload, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// Name is the resolver for the name field.
func (r *organisationResolver) Name(ctx context.Context, obj *db.Organisation) (string, error) {
	return obj.Slug, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (model.MePayload, error) {
	userId, ok := auth.GetUserIDFromContext(ctx)
	if !ok {
		return model.MePayload{}, errors.New("no user found")
	}

	user, err := r.Services.DB.UserFindByID(ctx, userId)
	if err != nil {
		return model.MePayload{}, err
	}

	return model.MePayload{User: user}, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, input model.ProjectsInput) (model.ProjectConnection, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Organisations is the resolver for the organisations field.
func (r *userResolver) Organisations(ctx context.Context, obj *db.User) (model.OrganisationConnection, error) {
	organisations, err := r.Services.DB.OrganisationFindByUserID(ctx, obj.ID)
	if err != nil {
		return model.OrganisationConnection{}, err
	}

	return model.OrganisationConnection{Nodes: organisations}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Organisation returns OrganisationResolver implementation.
func (r *Resolver) Organisation() OrganisationResolver { return &organisationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type organisationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
